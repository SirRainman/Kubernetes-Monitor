apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-core
  namespace: monitoring
  labels:
    app: grafana
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: core
    spec:
      securityContext:
        runAsUser: 472
        fsGroup: 472
      containers:
      - image: grafana/grafana:7.1.0
        name: grafana-core
        imagePullPolicy: IfNotPresent
        # env:
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
          # The following env variables set up basic auth twith the default admin user and admin password.
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_SECURITY_COOKIE_SECURE
            value: "true"
          - name: GF_SECURITY_COOKIE_SAMESITE
            value: "none"
          - name: GF_SECURITY_ALLOW_EMBEDDING
            value: "true"
          # - name: GF_SECURITY_ADMIN_USER
          #   value: admin
          # - name: GF_SECURITY_ADMIN_PASSWORD
          #   value: admin321
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: Admin
          # does not really work, because of template variables in exported dashboards:
          # - name: GF_DASHBOARDS_JSON_ENABLED
          #   value: "true"
        readinessProbe:
          httpGet:
            path: /login
            port: 3000
          # initialDelaySeconds: 30
          # timeoutSeconds: 1
        volumeMounts:
        - name: grafana-persistent-storage
          mountPath: /var/lib/grafana
          subPath: grafana
        # volumeMounts:
        # - mountPath: /var/lib/grafana # pod下的目录
        #   name: storage

      # initContainers:
      # - name: "init-chown-data"
      #   image: "busybox:latest"
      #   imagePullPolicy: IfNotPresent
      #   command: ["chown", "-R", "472:472", "/var/lib/grafana"]
      #   volumeMounts: 
      #     - name: grafana-persistent-storage
      #       mountPath: /var/lib/grafana
      #       subPath: grafana

      volumes:
      - name: grafana-persistent-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      # volumes:
      # - name: storage
      #   hostPath:
      #     path: /home/ubuntu/grafana_data  #宿主机path
      #     type: DirectoryOrCreate

---

apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-chown
  namespace: monitoring
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: grafana-chown
        command: ["chown", "-R", "472:472", "/var/lib/grafana"]
        image: busybox
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: storage
          subPath: grafana
          mountPath: /var/lib/grafana
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: grafana-pvc